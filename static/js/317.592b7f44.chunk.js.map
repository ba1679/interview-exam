{"version":3,"file":"static/js/317.592b7f44.chunk.js","mappings":"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","sources":["webpack://alfred-test/./src/pages/Login/index.module.scss?06d1","pages/Login/index.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"login\":\"Login_login__H7jrH\",\"loginTitle\":\"Login_loginTitle__3ZrMe\",\"formTitle\":\"Login_formTitle__AZxlL\",\"loginForm\":\"Login_loginForm__ZU2s3\",\"invalid\":\"Login_invalid__spGJr\",\"actionBtns\":\"Login_actionBtns__du0+j\"};","import React, { useState, useContext, useEffect } from 'react';\nimport clx from 'classnames';\nimport { useTranslation } from 'react-i18next';\nimport { Button, Form, Spinner } from 'react-bootstrap';\nimport { useForm } from 'react-hook-form';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { login, signInWighGoogle } from 'services/firebase';\nimport Layout from 'components/layout';\nimport useStorage from 'hooks/useStorage';\nimport { TloginForm } from 'types';\nimport { AuthContext } from 'App';\nimport googleIcon from 'assets/images/icons/google.png';\n\nimport styles from './index.module.scss';\n\nconst Login = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [loginErrorMsg, setLoginErrorMsg] = useState<string | null>(null);\n  const { auth } = useContext(AuthContext);\n  const [emailVal, setEmail, removeEmail] = useStorage<string>('email', '');\n  const [passwordVal, setPassword, removePassword] = useStorage<string>(\n    'password',\n    ''\n  );\n\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n\n  const {\n    handleSubmit,\n    register,\n    formState: { errors, isValid },\n  } = useForm({\n    defaultValues: {\n      email: emailVal,\n      password: passwordVal,\n      check: Boolean(emailVal || passwordVal),\n    },\n    mode: 'onChange',\n  });\n\n  const handleLogin = async (data: TloginForm & { check: boolean }) => {\n    setIsLoading(true);\n    if (data.check) {\n      setEmail(data.email);\n      setPassword(data.password);\n    } else {\n      removeEmail();\n      removePassword();\n    }\n    try {\n      await login({\n        email: data.email,\n        password: data.password,\n      });\n    } catch (error) {\n      if (error instanceof Error) {\n        if (error.message.includes('user-not-found')) {\n          setLoginErrorMsg(t('errorMsg.userNotFound'));\n        } else {\n          setLoginErrorMsg(t('errorMsg.wrongPassword'));\n        }\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSignInWithGoogle = async () => {\n    try {\n      await signInWighGoogle();\n    } catch (error) {\n      if (error instanceof Error) {\n        console.log(error.message);\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (auth) navigate('/');\n  }, [auth, navigate]);\n\n  return (\n    <Layout>\n      <div className={styles.login}>\n        <div className={styles.formTitle}>\n          <div className={styles.loginTitle}>{t('login.title')}</div>\n          <small>For business, band or celebrity.</small>\n        </div>\n        {loginErrorMsg && (\n          <div className='text-center text-danger'>{loginErrorMsg}</div>\n        )}\n        <Form className={styles.loginForm}>\n          <Form.Group className='mb-3'>\n            <Form.Label>{t('common.email')}</Form.Label>\n            <Form.Control\n              type='email'\n              className={clx({ [styles.invalid]: errors?.email })}\n              {...register('email', {\n                required: true,\n                pattern: {\n                  value: /^[^@]+@[^@]+\\.[^@]+$/,\n                  message: t('errorMsg.email'),\n                },\n              })}\n            />\n          </Form.Group>\n          <Form.Group className='mb-3'>\n            <Form.Label>{t('common.password')}</Form.Label>\n            <Form.Control\n              type='password'\n              className={clx({ [styles.invalid]: errors?.password })}\n              {...register('password', {\n                required: true,\n                minLength: 6,\n              })}\n            />\n          </Form.Group>\n          <div className='d-flex justify-content-between'>\n            <Form.Group className='mb-3' controlId='checkbox'>\n              <Form.Check\n                type='checkbox'\n                label={t('login.remamberMe')}\n                {...register('check')}\n              />\n            </Form.Group>\n            <a href='https://www.google.com/' className='text-primary'>\n              {t('login.forgotPassword')}?\n            </a>\n          </div>\n          <div className={styles.actionBtns}>\n            <Button\n              onClick={handleSubmit(handleLogin)}\n              disabled={!isValid || isLoading}>\n              {t('login.title')}\n              {isLoading && (\n                <Spinner animation='border' size='sm' className='ms-3' />\n              )}\n            </Button>\n            <Button\n              variant='secondary'\n              onClick={handleSignInWithGoogle}\n              disabled={isLoading}>\n              <img src={googleIcon} alt='google-icon' className='me-2' />\n              {t('login.google')}\n            </Button>\n          </div>\n        </Form>\n        <div className='text-center mt-4 mt-xl-5'>\n          {t('login.dontHaveAccount')}{' '}\n          <Link to='/sign-up'> {t('signUp.title')}</Link>\n        </div>\n      </div>\n    </Layout>\n  );\n};\n\nexport default Login;\n"],"names":["useState","isLoading","setIsLoading","loginErrorMsg","setLoginErrorMsg","auth","useContext","AuthContext","useStorage","emailVal","setEmail","removeEmail","passwordVal","setPassword","removePassword","t","useTranslation","navigate","useNavigate","useForm","defaultValues","email","password","check","Boolean","mode","handleSubmit","register","formState","errors","isValid","handleLogin","data","login","Error","message","includes","handleSignInWithGoogle","signInWighGoogle","console","log","useEffect","className","styles","Form","type","clx","required","pattern","value","minLength","controlId","label","href","Button","onClick","disabled","Spinner","animation","size","variant","src","googleIcon","alt","to"],"sourceRoot":""}