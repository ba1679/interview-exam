{"version":3,"file":"static/js/773.614b24de.chunk.js","mappings":"yUAIMA,EAAmBC,EAAAA,YAAiB,WAMvCC,GAAQ,IALTC,EAKS,EALTA,SACAC,EAIS,EAJTA,UAIS,IAFTC,GAAIC,OAEK,MAFO,MAEP,EADNC,GACM,YACHC,GAAoBC,EAAAA,EAAAA,IAAmBN,EAAU,OACjDO,GAAcC,EAAAA,EAAAA,MACdC,GAAgBC,EAAAA,EAAAA,MAChBC,EAAa,GAAH,OAAMN,EAAN,SACVO,EAAU,GAiBhB,OAhBAL,EAAYM,SAAQ,SAAAC,GAClB,IAEIC,EAFEC,EAAYZ,EAAMU,UACjBV,EAAMU,GAKTC,EAFa,MAAbC,GAA0C,kBAAdA,EAG1BA,EADFD,KAGKC,EAGT,IAAMC,EAAQH,IAAaL,EAAb,WAAiCK,GAAa,GAChD,MAARC,GAAcH,EAAQM,KAAR,UAAgBP,GAAhB,OAA6BM,EAA7B,YAAsCF,GACzD,KACmBI,EAAAA,EAAAA,KAAKhB,GAAD,QAAC,QACvBJ,IAAKA,GACFK,GAFmB,IAGtBH,UAAWmB,IAAAA,WAAA,GAAWnB,EAAWI,GAAtB,OAA4CO,MAE1D,IACDf,EAAIwB,YAAc,MAClB,Q,6GCtCA,EAAwB,sBAAxB,EAA2D,2BAA3D,EAAkG,0BAAlG,EAAwI,0BAAxI,EAA4K,wBAA5K,EAAoN,8BAApN,EAA+P,2BCuT/P,EApSe,WACb,OAAkCC,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA4CF,EAAAA,EAAAA,UAAwB,MAApE,eAAOG,EAAP,KAAuBC,EAAvB,KACA,GAAkCJ,EAAAA,EAAAA,UAAsB,MAAxD,eAAOK,EAAP,KAAkBC,EAAlB,KACMC,GAAYC,EAAAA,EAAAA,SAAO,GACnBC,GAAiBD,EAAAA,EAAAA,QAAgC,MACvD,GAA0BE,EAAAA,EAAAA,YAAWC,EAAAA,GAA7BC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QACd,GAA0CC,EAAAA,EAAAA,GAAmB,QAAS,IAAtE,eAAOC,EAAP,KAAiBC,EAAjB,KAA2BC,EAA3B,KACA,GAAmDH,EAAAA,EAAAA,GACjD,WACA,IAFF,eAAOI,GAAP,KAAoBC,GAApB,KAAiCC,GAAjC,KAKQC,IAAMC,EAAAA,EAAAA,KAAND,EACFE,IAAWC,EAAAA,EAAAA,MAEjB,IAKIC,EAAAA,EAAAA,IAAQ,CACVC,cAAe,CACbC,UAAW,GACXC,SAAU,GACVC,YAAa,GACbC,MAAOf,EACPgB,SAAUb,GACVc,gBAAiB,GACjBC,cAAeC,QAAQnB,GAAYG,IACnCiB,WAAW,GAEbC,KAAM,aAfNC,GADF,GACEA,aACAC,GAFF,GAEEA,SACAC,GAHF,GAGEA,MAHF,MAIEC,UAAaC,GAJf,GAIeA,OAAQC,GAJvB,GAIuBA,QAejBC,GAAY,yCAAG,WACnBC,GADmB,6FAGnBrC,EAAUsC,SAAU,EACZlB,EAAwDiB,EAAxDjB,UAAWC,EAA6CgB,EAA7ChB,SAAUE,EAAmCc,EAAnCd,MAAOC,EAA4Ba,EAA5Bb,SAAUE,EAAkBW,EAAlBX,cAC1Ca,EAAW,GACf5C,GAAa,IACTG,EAPe,wBAQX0C,GAAStE,EAAAA,EAAAA,IACbuE,EAAAA,GADgB,sBAED3C,EAAU4C,KAFT,YAEiBC,KAAKC,QAVvB,UAYXC,EAAAA,EAAAA,IAAYL,EAAQ1C,GAZT,yBAaAgD,EAAAA,EAAAA,IAAeN,GAbf,QAajBD,EAbiB,sBAefb,GACFjB,EAASc,GACTX,GAAYY,KAEZd,IACAG,MApBiB,qBAuBEkC,EAAAA,EAAAA,IAAwB,CACzC3B,UAAAA,EACAC,SAAAA,EACAE,MAAAA,EACAC,SAAAA,EACAe,SAAAA,IA5Be,QAuBXS,EAvBW,OA8BjB1C,EAAQ0C,GACRhC,GAAS,KA/BQ,mDAiCb,gBAAiBiC,QACf,KAAMC,QAAQC,SAAS,wBACzBtD,EAAkBiB,GAAE,+BAEpBjB,EAAkB,KAAMqD,UArCX,yBAyCjBvD,GAAa,GAzCI,8EAAH,sDA6CZyD,GAAsB,yCAAG,6GAErBC,EAAAA,EAAAA,MAFqB,sDAIvB,gBAAiBJ,OACnBK,QAAQC,IAAI,KAAML,SALO,wDAAH,qDAmB5B,OAJAM,EAAAA,EAAAA,YAAU,WACJnD,GAAQL,EAAUsC,SAAStB,GAAS,IACzC,GAAE,CAACX,EAAMW,MAGR,SAAC,IAAD,WACE,iBAAK5C,UAAWqF,EAAhB,WACE,iBAAKrF,UAAWqF,EAAhB,WACE,gBAAKrF,UAAWqF,EAAhB,SAAoC3C,GAAE,mBACtC,mEAEDlB,IACC,gBAAKxB,UAAU,0BAAf,SAA0CwB,KAE5C,UAAC8D,EAAA,EAAD,CAAMtF,UAAWqF,EAAjB,WACE,UAAC,EAAD,YACE,SAACE,EAAA,EAAD,CAAKC,GAAI,EAAT,UACE,UAACF,EAAA,QAAD,CAAYtF,UAAU,OAAtB,WACE,SAACsF,EAAA,QAAD,UAAa5C,GAAE,uBACf,SAAC4C,EAAA,WAAD,QAAcG,KAAK,QAAW9B,GAAS,qBAG3C,SAAC4B,EAAA,EAAD,CAAKC,GAAI,EAAT,UACE,UAACF,EAAA,QAAD,CAAYtF,UAAU,OAAtB,WACE,SAACsF,EAAA,QAAD,UAAa5C,GAAE,sBACf,SAAC4C,EAAA,WAAD,QAAcG,KAAK,QAAW9B,GAAS,uBAI7C,UAAC,EAAD,YACE,SAAC4B,EAAA,EAAD,CAAKC,GAAI,EAAT,UACE,UAACF,EAAA,QAAD,CAAYtF,UAAU,OAAtB,WACE,UAACsF,EAAA,QAAD,WACG5C,GAAE,gBADL,KACsB,iBAAM1C,UAAU,cAAhB,mBAEtB,SAACsF,EAAA,WAAD,QACEG,KAAK,QACLzF,UAAW0F,KAAI,UAAGL,EAAJ,OAAqBvB,SAArB,IAAqBA,QAArB,EAAqBA,GAAQX,SACvCQ,GAAS,QAAS,CACpBgC,UAAU,EACVC,QAAS,CACPC,MAAO,uBACPf,QAASpC,GAAE,uBAIhBoB,GAAOX,QACN,kBAAOnD,UAAU,cAAjB,SAAgC8D,GAAOX,MAAM2B,gBAInD,SAACS,EAAA,EAAD,CAAKC,GAAI,EAAT,UACE,UAACF,EAAA,QAAD,CAAYtF,UAAU,OAAtB,WACE,SAACsF,EAAA,QAAD,UAAa5C,GAAE,yBACf,SAAC4C,EAAA,WAAD,QAAcG,KAAK,OAAU9B,GAAS,0BAI5C,UAAC,EAAD,YACE,SAAC4B,EAAA,EAAD,CAAKC,GAAI,EAAT,UACE,UAACF,EAAA,QAAD,CAAYtF,UAAU,OAAtB,WACE,UAACsF,EAAA,QAAD,WACG5C,GAAE,mBADL,KACyB,iBAAM1C,UAAU,cAAhB,mBAEzB,SAACsF,EAAA,WAAD,QACEG,KAAK,WACLzF,UAAW0F,KAAI,UAAGL,EAAJ,OAAqBvB,SAArB,IAAqBA,QAArB,EAAqBA,GAAQV,YACvCO,GAAS,WAAY,CACvBgC,UAAU,EACVG,UAAW,CACTD,MAAO,EACPf,QAASpC,GAAE,0BAIhBoB,GAAOV,WACN,kBAAOpD,UAAU,cAAjB,SACG8D,GAAOV,SAAS0B,gBAKzB,SAACS,EAAA,EAAD,CAAKC,GAAI,EAAT,UACE,UAACF,EAAA,QAAD,CAAYtF,UAAU,OAAtB,WACE,UAACsF,EAAA,QAAD,WACG5C,GAAE,0BAA2B,KAC9B,iBAAM1C,UAAU,cAAhB,mBAEF,SAACsF,EAAA,WAAD,QACEG,KAAK,WACLzF,UAAW0F,KAAI,UAAGL,EAAJ,OAAqBvB,SAArB,IAAqBA,QAArB,EAAqBA,GAAQT,mBACvCM,GAAS,kBAAmB,CAC9BgC,UAAU,EACVI,SAAU,SAACC,GACT,OACEA,IAAQpC,GAAM,aACdlB,GAAE,2BAEL,MAGJoB,GAAOT,kBACN,kBAAOrD,UAAU,cAAjB,SACG8D,GAAOT,gBAAgByB,mBAMlC,UAAC,EAAD,CAAK9E,UAAU,0BAAf,WACE,UAACuF,EAAA,EAAD,YACE,kBACEvF,UAAU,SACVyF,KAAK,OACL3F,IAAKgC,EACLmE,OAAO,UACPC,SAAU,SAACC,GAAD,OAzHG,SAACA,GACrBA,EAAMC,OAAOC,OAClB1E,EAAawE,EAAMC,OAAOC,MAAM,GACjC,CAsHkCC,CAAmBH,EAA9B,KAEZ,SAACI,EAAA,EAAD,CAAQC,QAAS,kCAAM1E,EAAeoC,eAArB,aAAM,EAAwBuC,OAA9B,EAAjB,SACG/D,GAAE,+BAGNhB,IACC,SAAC6D,EAAA,EAAD,WACE,gBACEmB,IAAKC,IAAIC,gBAAgBlF,GACzBmF,IAAKnF,EAAU4C,KACftE,UAAWqF,UAKnB,iBAAKrF,UAAU,iCAAf,WACE,SAACsF,EAAA,QAAD,CAAYtF,UAAU,OAAO8G,UAAU,mBAAvC,UACE,SAACxB,EAAA,SAAD,gBACEG,KAAK,YACD9B,GAAS,kBAFf,IAGEoD,MAAOrE,GAAE,0BAGb,eAAGsE,KAAK,0BAA0BhH,UAAU,eAA5C,UACG0C,GAAE,wBADL,WAIF,SAAC4C,EAAA,QAAD,CAAYtF,UAAU,OAAO8G,UAAU,eAAvC,UACE,SAACxB,EAAA,SAAD,gBACEG,KAAK,YACD9B,GAAS,YAAa,CAAEgC,UAAU,KAFxC,IAGEoB,OACE,iDACqB,KACnB,cACEC,KAAK,0BACLZ,OAAO,SACPa,IAAI,sBAHN,mBAKK,IAPP,MAQM,KACJ,cACED,KAAK,0BACLZ,OAAO,SACPa,IAAI,sBAHN,qCAUR,iBAAKjH,UAAWqF,EAAhB,WACE,UAACkB,EAAA,EAAD,CACEC,QAAS9C,GAAaM,IACtBkD,UAAWnD,IAAWzC,EAFxB,UAGGoB,GAAE,gBACFpB,IACC,SAAC6F,EAAA,EAAD,CAASC,UAAU,SAASC,KAAK,KAAKrH,UAAU,aAGpD,UAACuG,EAAA,EAAD,CACEe,QAAQ,YACRd,QAASxB,GACTkC,SAAU5F,EAHZ,WAIE,gBAAKoF,IAAKa,EAAYV,IAAI,cAAc7G,UAAU,SACjD0C,GAAE,0BAIT,iBAAK1C,UAAU,mBAAf,UACG0C,GAAE,8BACH,SAAC,KAAD,CAAM8E,GAAG,SAASxH,UAAU,OAA5B,SACG0C,GAAE,wBAMd,C","sources":["../node_modules/react-bootstrap/esm/Row.js","webpack://alfred-test/./src/pages/SignUp/index.module.scss?406c","pages/SignUp/index.tsx"],"sourcesContent":["import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix, useBootstrapBreakpoints, useBootstrapMinBreakpoint } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Row = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'row');\n  const breakpoints = useBootstrapBreakpoints();\n  const minBreakpoint = useBootstrapMinBreakpoint();\n  const sizePrefix = `${decoratedBsPrefix}-cols`;\n  const classes = [];\n  breakpoints.forEach(brkPoint => {\n    const propValue = props[brkPoint];\n    delete props[brkPoint];\n    let cols;\n\n    if (propValue != null && typeof propValue === 'object') {\n      ({\n        cols\n      } = propValue);\n    } else {\n      cols = propValue;\n    }\n\n    const infix = brkPoint !== minBreakpoint ? `-${brkPoint}` : '';\n    if (cols != null) classes.push(`${sizePrefix}${infix}-${cols}`);\n  });\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, decoratedBsPrefix, ...classes)\n  });\n});\nRow.displayName = 'Row';\nexport default Row;","// extracted by mini-css-extract-plugin\nexport default {\"login\":\"SignUp_login__YNqRN\",\"loginTitle\":\"SignUp_loginTitle__lOmtD\",\"formTitle\":\"SignUp_formTitle__0GrTZ\",\"loginForm\":\"SignUp_loginForm__eJHuA\",\"invalid\":\"SignUp_invalid__EliEK\",\"previewAvatar\":\"SignUp_previewAvatar__hrtfa\",\"actionBtns\":\"SignUp_actionBtns__sc2CP\"};","import React, { useContext, useEffect, useRef, useState } from 'react';\nimport clx from 'classnames';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { Button, Col, Form, Row, Spinner } from 'react-bootstrap';\nimport { useTranslation } from 'react-i18next';\nimport { useForm } from 'react-hook-form';\nimport { ref, uploadBytes, getDownloadURL } from 'firebase/storage';\nimport Layout from 'components/layout';\nimport useStorage from 'hooks/useStorage';\nimport {\n  signInWighGoogle,\n  signUpAndUpdateUserInfo,\n  storage,\n} from 'services/firebase';\nimport { AuthContext } from 'App';\nimport googleIcon from 'assets/images/icons/google.png';\n\nimport styles from './index.module.scss';\nimport { TsignUpForm } from 'types';\n\nconst SignUp = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [signUpErrorMsg, setSignUpErrorMsg] = useState<string | null>(null);\n  const [avatarImg, setAvatarImg] = useState<File | null>(null);\n  const firstLoad = useRef(true);\n  const avatarInputRef = useRef<HTMLInputElement | null>(null);\n  const { auth, setAuth } = useContext(AuthContext);\n  const [emailVal, setEmail, removeEmail] = useStorage<string>('email', '');\n  const [passwordVal, setPassword, removePassword] = useStorage<string>(\n    'password',\n    ''\n  );\n\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n\n  const {\n    handleSubmit,\n    register,\n    watch,\n    formState: { errors, isValid },\n  } = useForm({\n    defaultValues: {\n      firstName: '',\n      lastName: '',\n      phoneNumber: '',\n      email: emailVal,\n      password: passwordVal,\n      confirmPassword: '',\n      rememberCheck: Boolean(emailVal || passwordVal),\n      termCheck: false,\n    },\n    mode: 'onChange',\n  });\n\n  const handleSignUp = async (\n    data: TsignUpForm & { rememberCheck: boolean }\n  ) => {\n    firstLoad.current = false;\n    const { firstName, lastName, email, password, rememberCheck } = data;\n    let photoURL = '';\n    setIsLoading(true);\n    if (avatarImg) {\n      const imgRef = ref(\n        storage,\n        `user-avatar/${avatarImg.name}_${Date.now()}`\n      );\n      await uploadBytes(imgRef, avatarImg);\n      photoURL = await getDownloadURL(imgRef);\n    }\n    if (rememberCheck) {\n      setEmail(email);\n      setPassword(password);\n    } else {\n      removeEmail();\n      removePassword();\n    }\n    try {\n      const user = await signUpAndUpdateUserInfo({\n        firstName,\n        lastName,\n        email,\n        password,\n        photoURL,\n      });\n      setAuth(user);\n      navigate('/');\n    } catch (error) {\n      if (error instanceof Error) {\n        if (error.message.includes('email-already-in-use')) {\n          setSignUpErrorMsg(t('errorMsg.emailAlreadyExist'));\n        } else {\n          setSignUpErrorMsg(error.message);\n        }\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSignInWithGoogle = async () => {\n    try {\n      await signInWighGoogle();\n    } catch (error) {\n      if (error instanceof Error) {\n        console.log(error.message);\n      }\n    }\n  };\n\n  const handleSetAvatarImg = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (!event.target.files) return;\n    setAvatarImg(event.target.files[0]);\n  };\n\n  useEffect(() => {\n    if (auth && firstLoad.current) navigate('/');\n  }, [auth, navigate]);\n\n  return (\n    <Layout>\n      <div className={styles.login}>\n        <div className={styles.formTitle}>\n          <div className={styles.loginTitle}>{t('signUp.title')}</div>\n          <small>For business, band or celebrity.</small>\n        </div>\n        {signUpErrorMsg && (\n          <div className='text-center text-danger'>{signUpErrorMsg}</div>\n        )}\n        <Form className={styles.loginForm}>\n          <Row>\n            <Col md={6}>\n              <Form.Group className='mb-3'>\n                <Form.Label>{t('signUp.firstName')}</Form.Label>\n                <Form.Control type='text' {...register('firstName')} />\n              </Form.Group>\n            </Col>\n            <Col md={6}>\n              <Form.Group className='mb-3'>\n                <Form.Label>{t('signUp.lastName')}</Form.Label>\n                <Form.Control type='text' {...register('lastName')} />\n              </Form.Group>\n            </Col>\n          </Row>\n          <Row>\n            <Col md={6}>\n              <Form.Group className='mb-3'>\n                <Form.Label>\n                  {t('common.email')} <span className='text-danger'>*</span>\n                </Form.Label>\n                <Form.Control\n                  type='email'\n                  className={clx({ [styles.invalid]: errors?.email })}\n                  {...register('email', {\n                    required: true,\n                    pattern: {\n                      value: /^[^@]+@[^@]+\\.[^@]+$/,\n                      message: t('errorMsg.email'),\n                    },\n                  })}\n                />\n                {errors.email && (\n                  <small className='text-danger'>{errors.email.message}</small>\n                )}\n              </Form.Group>\n            </Col>\n            <Col md={6}>\n              <Form.Group className='mb-3'>\n                <Form.Label>{t('signUp.phoneNumber')}</Form.Label>\n                <Form.Control type='tel' {...register('phoneNumber')} />\n              </Form.Group>\n            </Col>\n          </Row>\n          <Row>\n            <Col md={6}>\n              <Form.Group className='mb-3'>\n                <Form.Label>\n                  {t('common.password')} <span className='text-danger'>*</span>\n                </Form.Label>\n                <Form.Control\n                  type='password'\n                  className={clx({ [styles.invalid]: errors?.password })}\n                  {...register('password', {\n                    required: true,\n                    minLength: {\n                      value: 6,\n                      message: t('errorMsg.password'),\n                    },\n                  })}\n                />\n                {errors.password && (\n                  <small className='text-danger'>\n                    {errors.password.message}\n                  </small>\n                )}\n              </Form.Group>\n            </Col>\n            <Col md={6}>\n              <Form.Group className='mb-3'>\n                <Form.Label>\n                  {t('signUp.confirmPassword')}{' '}\n                  <span className='text-danger'>*</span>\n                </Form.Label>\n                <Form.Control\n                  type='password'\n                  className={clx({ [styles.invalid]: errors?.confirmPassword })}\n                  {...register('confirmPassword', {\n                    required: true,\n                    validate: (val) => {\n                      return (\n                        val === watch('password') ||\n                        t('errorMsg.confirmPassword')\n                      );\n                    },\n                  })}\n                />\n                {errors.confirmPassword && (\n                  <small className='text-danger'>\n                    {errors.confirmPassword.message}\n                  </small>\n                )}\n              </Form.Group>\n            </Col>\n          </Row>\n          <Row className='mb-3 align-items-center'>\n            <Col>\n              <input\n                className='d-none'\n                type='file'\n                ref={avatarInputRef}\n                accept='image/*'\n                onChange={(event) => handleSetAvatarImg(event)}\n              />\n              <Button onClick={() => avatarInputRef.current?.click()}>\n                {t('signUp.uploadAvatarImg')}\n              </Button>\n            </Col>\n            {avatarImg && (\n              <Col>\n                <img\n                  src={URL.createObjectURL(avatarImg)}\n                  alt={avatarImg.name}\n                  className={styles.previewAvatar}\n                />\n              </Col>\n            )}\n          </Row>\n          <div className='d-flex justify-content-between'>\n            <Form.Group className='mb-3' controlId='rememberCheckbox'>\n              <Form.Check\n                type='checkbox'\n                {...register('rememberCheck')}\n                label={t('login.remamberMe')}\n              />\n            </Form.Group>\n            <a href='https://www.google.com/' className='text-primary'>\n              {t('login.forgotPassword')}?\n            </a>\n          </div>\n          <Form.Group className='mb-3' controlId='termCheckbox'>\n            <Form.Check\n              type='checkbox'\n              {...register('termCheck', { required: true })}\n              label={\n                <span>\n                  I agree to all the{' '}\n                  <a\n                    href='https://www.google.com/'\n                    target='_blank'\n                    rel='noopener noreferrer'>\n                    Terms\n                  </a>{' '}\n                  and{' '}\n                  <a\n                    href='https://www.google.com/'\n                    target='_blank'\n                    rel='noopener noreferrer'>\n                    Privacy policy\n                  </a>\n                </span>\n              }\n            />\n          </Form.Group>\n          <div className={styles.actionBtns}>\n            <Button\n              onClick={handleSubmit(handleSignUp)}\n              disabled={!isValid || isLoading}>\n              {t('signUp.title')}\n              {isLoading && (\n                <Spinner animation='border' size='sm' className='ms-3' />\n              )}\n            </Button>\n            <Button\n              variant='secondary'\n              onClick={handleSignInWithGoogle}\n              disabled={isLoading}>\n              <img src={googleIcon} alt='google-icon' className='me-2' />\n              {t('login.google')}\n            </Button>\n          </div>\n        </Form>\n        <div className='text-center my-4'>\n          {t('signUp.alreadyHaveAccount')}\n          <Link to='/login' className='ps-1'>\n            {t('login.title')}\n          </Link>\n        </div>\n      </div>\n    </Layout>\n  );\n};\n\nexport default SignUp;\n"],"names":["Row","React","ref","bsPrefix","className","as","Component","props","decoratedBsPrefix","useBootstrapPrefix","breakpoints","useBootstrapBreakpoints","minBreakpoint","useBootstrapMinBreakpoint","sizePrefix","classes","forEach","brkPoint","cols","propValue","infix","push","_jsx","classNames","displayName","useState","isLoading","setIsLoading","signUpErrorMsg","setSignUpErrorMsg","avatarImg","setAvatarImg","firstLoad","useRef","avatarInputRef","useContext","AuthContext","auth","setAuth","useStorage","emailVal","setEmail","removeEmail","passwordVal","setPassword","removePassword","t","useTranslation","navigate","useNavigate","useForm","defaultValues","firstName","lastName","phoneNumber","email","password","confirmPassword","rememberCheck","Boolean","termCheck","mode","handleSubmit","register","watch","formState","errors","isValid","handleSignUp","data","current","photoURL","imgRef","storage","name","Date","now","uploadBytes","getDownloadURL","signUpAndUpdateUserInfo","user","Error","message","includes","handleSignInWithGoogle","signInWighGoogle","console","log","useEffect","styles","Form","Col","md","type","clx","required","pattern","value","minLength","validate","val","accept","onChange","event","target","files","handleSetAvatarImg","Button","onClick","click","src","URL","createObjectURL","alt","controlId","label","href","rel","disabled","Spinner","animation","size","variant","googleIcon","to"],"sourceRoot":""}